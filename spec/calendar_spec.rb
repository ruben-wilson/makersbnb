require 'calendar'

describe Calendar do

  context "availability" do

    it 'shows if selected date is available or not YYYY-MM-DD' do
      year_2022 = '2022-'\
        '0000000000000000000000000000000-'\
        '0000000000000000000000000000-'\
        '0000000000000000000000000000000-'\
        '000000000000000000000000000000-'\
        '0000000000000000000000000000000-'\
        '000000000000000000000000000000-'\
        '0010000000000000000000000000000-'\
        '0000000000000000000000000000000-'\
        '000000000000000000000000000000-'\
        '0000000000000000000000000000000-'\
        '000000000000000000000000000000-'\
        '0000000000000000000000000000000'

      cal = Calendar.new(year_2022)
      expect(cal.available?(2022, 7, 3)).to eq(false)
      expect(cal.available?(2022, 7, 4)).to eq(true)
    end

    it "raises error if year is wrong" do

      year_2021 = '2021-'\
      '0000000000000000000000000000000-'\
      '0000000000000000000000000000-'\
      '0000000000000000000000000000000-'\
      '000000000000000000000000000000-'\
      '0000000000000000000000000000000-'\
      '000000000000000000000000000000-'\
      '0010000000000000000000000000000-'\
      '0000000000000000000000000000000-'\
      '000000000000000000000000000000-'\
      '0000000000000000000000000000000-'\
      '000000000000000000000000000000-'\
      '0000000000000000000000000000000'

      cal = Calendar.new(year_2021)
      str = "Date year [2022] does not match calendar year [2021]"
      expect { cal.available?(2022, 7, 3) }.to raise_error(str)
    end
  end

  context "book a date" do
    it "books a date" do

      year_2022 = '2022-'\
        '0000000000000000000000000000000-'\
        '0000000000000000000000000000-'\
        '0000000000000000000000000000000-'\
        '000000000000000000000000000000-'\
        '0000000000000000000000000000000-'\
        '000000000000000000000000000000-'\
        '0010000000000000000000000000000-'\
        '0000000000000000000000000000000-'\
        '000000000000000000000000000000-'\
        '0000000000000000000000000000000-'\
        '000000000000000000000000000000-'\
        '0000000000000000000000000000000'
      
      cal = Calendar.new(year_2022)
      cal.book(2022, 1, 1)
      expect(cal.available?(2022, 01, 01)).to eq(false)
    end

    it "books a week" do

      year_2022 = '2022-'\
        '0000000000000000000000000000000-'\
        '0000000000000000000000000000-'\
        '0000000000000000000000000000000-'\
        '000000000000000000000000000000-'\
        '0000000000000000000000000000000-'\
        '000000000000000000000000000000-'\
        '0010000000000000000000000000000-'\
        '0000000000000000000000000000000-'\
        '000000000000000000000000000000-'\
        '0000000000000000000000000000000-'\
        '000000000000000000000000000000-'\
        '0000000000000000000000000000000'

      cal = Calendar.new(year_2022)
      (15..19).each do |num|
        cal.book(2022, 8, num)
      end

      result = (15..19).map do |num|
        cal.available?(2022, 8, num)
      end
      expect(result.include?(true)).to eq(false)
    end
  end

  context "unbooks a date" do 
    it "unbooks" do
      
      year_2022 = '2022-'\
        '0000000000000000000000000000000-'\
        '0000000000000000000000000000-'\
        '0000000000000000000000000000000-'\
        '000000000000000000000000000000-'\
        '0000000000000000000000000000000-'\
        '000000000000000000000000000000-'\
        '0010000000000000000000000000000-'\
        '0000000000000000000000000000000-'\
        '000000000000000000000000000000-'\
        '0000000000000000000000000000000-'\
        '000000000000000000000000000000-'\
        '0000000000000000000000001000000'
      
      cal = Calendar.new(year_2022)
      expect(cal.available?(2022, 12, 25)).to eq(false)
      cal.unbook(2022, 12, 25)
      expect(cal.available?(2022, 12, 25)).to eq(true)
    end
  end
end
